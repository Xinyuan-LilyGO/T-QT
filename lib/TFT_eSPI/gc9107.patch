diff --git a/TFT_Drivers/GC9A01_Rotation.h b/TFT_Drivers/GC9A01_Rotation.h
index a4c8f3e..0083f5d 100644
--- a/TFT_Drivers/GC9A01_Rotation.h
+++ b/TFT_Drivers/GC9A01_Rotation.h
@@ -1,28 +1,57 @@
 
 // This is the command sequence that rotates the GC9A01 driver coordinate frame
 
-  rotation = m % 4;
+rotation = m % 4;
 
-  writecommand(TFT_MADCTL);
-  switch (rotation) {
-    case 0: // Portrait
-      writedata(TFT_MAD_BGR);
-      _width  = _init_width;
-      _height = _init_height;
-      break;
-    case 1: // Landscape (Portrait + 90)
-      writedata(TFT_MAD_MX | TFT_MAD_MV | TFT_MAD_BGR);
-      _width  = _init_height;
-      _height = _init_width;
-      break;
-    case 2: // Inverter portrait
-      writedata(TFT_MAD_MX | TFT_MAD_MY | TFT_MAD_BGR);
-      _width  = _init_width;
-      _height = _init_height;
-      break;
-    case 3: // Inverted landscape
-      writedata(TFT_MAD_MV | TFT_MAD_MY | TFT_MAD_BGR);
-      _width  = _init_height;
-      _height = _init_width;
-      break;
+writecommand(TFT_MADCTL);
+switch (rotation)
+{
+case 0: // Portrait
+#ifdef CGRAM_OFFSET
+  if (_init_width == 128)
+  {
+    colstart = 2;
+    rowstart = 1;
   }
+#endif
+  writedata(TFT_MAD_BGR);
+  _width = _init_width;
+  _height = _init_height;
+  break;
+case 1: // Landscape (Portrait + 90)
+#ifdef CGRAM_OFFSET
+  if (_init_width == 128)
+  {
+    colstart = 1;
+    rowstart = 2;
+  }
+#endif
+  writedata(TFT_MAD_MX | TFT_MAD_MV | TFT_MAD_BGR);
+  _width = _init_height;
+  _height = _init_width;
+  break;
+case 2: // Inverter portrait
+#ifdef CGRAM_OFFSET
+  if (_init_width == 128)
+  {
+    colstart = 2;
+    rowstart = 1;
+  }
+#endif
+  writedata(TFT_MAD_MX | TFT_MAD_MY | TFT_MAD_BGR);
+  _width = _init_width;
+  _height = _init_height;
+  break;
+case 3: // Inverted landscape
+#ifdef CGRAM_OFFSET
+  if (_init_width == 128)
+  {
+    colstart = 1;
+    rowstart = 2;
+  }
+#endif
+  writedata(TFT_MAD_MV | TFT_MAD_MY | TFT_MAD_BGR);
+  _width = _init_height;
+  _height = _init_width;
+  break;
+}
diff --git a/User_Setup.h b/User_Setup.h
index 49d2ac7..6cf69bb 100644
--- a/User_Setup.h
+++ b/User_Setup.h
@@ -42,7 +42,7 @@
 //#define RPI_DISPLAY_TYPE // 20MHz maximum SPI
 
 // Only define one driver, the other ones must be commented out
-#define ILI9341_DRIVER       // Generic driver for common displays
+// #define ILI9341_DRIVER       // Generic driver for common displays
 //#define ILI9341_2_DRIVER     // Alternative ILI9341 driver, see https://github.com/Bodmer/TFT_eSPI/issues/1172
 //#define ST7735_DRIVER      // Define additional parameters below for this display
 //#define ILI9163_DRIVER     // Define additional parameters below for this display
@@ -62,7 +62,7 @@
 //#define SSD1963_800_DRIVER
 //#define SSD1963_800ALT_DRIVER
 //#define ILI9225_DRIVER
-//#define GC9A01_DRIVER
+#define GC9A01_DRIVER
 
 // Some displays support SPI reads via the MISO pin, other displays have a single
 // bi-directional SDA pin and the library will try to read this via the MOSI line.
@@ -73,7 +73,7 @@
 // For ST7735, ST7789 and ILI9341 ONLY, define the colour order IF the blue and red are swapped on your display
 // Try ONE option at a time to find the correct colour order for your display
 
-//  #define TFT_RGB_ORDER TFT_RGB  // Colour order Red-Green-Blue
+ #define TFT_RGB_ORDER TFT_RGB  // Colour order Red-Green-Blue
 //  #define TFT_RGB_ORDER TFT_BGR  // Colour order Blue-Green-Red
 
 // For M5Stack ESP32 module with integrated ILI9341 display ONLY, remove // in line below
@@ -82,11 +82,11 @@
 
 // For ST7789, ST7735, ILI9163 and GC9A01 ONLY, define the pixel width and height in portrait orientation
 // #define TFT_WIDTH  80
-// #define TFT_WIDTH  128
+#define TFT_WIDTH  128
 // #define TFT_WIDTH  172 // ST7789 172 x 320
 // #define TFT_WIDTH  240 // ST7789 240 x 240 and 240 x 320
 // #define TFT_HEIGHT 160
-// #define TFT_HEIGHT 128
+#define TFT_HEIGHT 128
 // #define TFT_HEIGHT 240 // ST7789 240 x 240
 // #define TFT_HEIGHT 320 // ST7789 240 x 320
 // #define TFT_HEIGHT 240 // GC9A01 240 x 240
@@ -165,9 +165,9 @@
 // ###### EDIT THE PIN NUMBERS IN THE LINES FOLLOWING TO SUIT YOUR ESP8266 SETUP ######
 
 // For NodeMCU - use pin numbers in the form PIN_Dx where Dx is the NodeMCU pin designation
-#define TFT_CS   PIN_D8  // Chip select control pin D8
-#define TFT_DC   PIN_D3  // Data Command control pin
-#define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)
+// #define TFT_CS   PIN_D8  // Chip select control pin D8
+// #define TFT_DC   PIN_D3  // Data Command control pin
+// #define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)
 //#define TFT_RST  -1    // Set TFT_RST to -1 if the display RESET is connected to NodeMCU RST or 3.3V
 
 //#define TFT_BL PIN_D1  // LED back-light (only for ST7789 with backlight control pin)
@@ -213,6 +213,13 @@
 // For ESP32 Dev board (only tested with GC9A01 display)
 // The hardware SPI can be mapped to any pins
 
+#define TFT_MISO -1
+#define TFT_MOSI 2
+#define TFT_SCLK 3
+#define TFT_CS 5 // Not connected
+#define TFT_DC 6
+#define TFT_RST 1 // Connect reset to ensure display initialises
+
 //#define TFT_MOSI 15 // In some display driver board, it might be written as "SDA" and so on.
 //#define TFT_SCLK 14
 //#define TFT_CS   5  // Chip select control pin
@@ -366,3 +373,5 @@
 // so changing it here has no effect
 
 // #define SUPPORT_TRANSACTIONS
+
+#define CGRAM_OFFSET
\ No newline at end of file
diff --git a/User_Setup_Select.h b/User_Setup_Select.h
index 6e6a899..357d3ff 100644
--- a/User_Setup_Select.h
+++ b/User_Setup_Select.h
@@ -113,7 +113,7 @@
 
 //#include <User_Setups/Setup202_SSD1351_128.h>      // Setup file for ESP32/ESP8266 based SSD1351 128x128 1.5inch OLED display
 
-//#include <User_Setups/Setup203_ST7789.h>     // Setup file for ESP32/ESP8266 based ST7789 240X280 1.69inch TFT 
+// #include <User_Setups/Setup203_ST7789.h>     // Setup file for ESP32/ESP8266 based ST7789 240X280 1.69inch TFT 
 
 //#include <User_Setups/Setup204_ESP32_TouchDown.h>     // Setup file for the ESP32 TouchDown based on ILI9488 480 x 320 TFT 
 
